<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Berto</title>
    <link>https://berto.github.io/blog/index.xml</link>
    <description>Recent content in Blog on Berto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 19 Aug 2017 20:08:23 -0700</lastBuildDate>
    <atom:link href="https://berto.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Freelance Web Development</title>
      <link>https://berto.github.io/blog/freelance-web-development/</link>
      <pubDate>Sat, 19 Aug 2017 20:08:23 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/freelance-web-development/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/freelance-web-development/#my-work&#34;&gt;My Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/freelance-web-development/#how-to-freelance&#34;&gt;How to Freelance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/freelance-web-development/#setting-expectations&#34;&gt;Setting Expectations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/freelance-web-development/#templates-and-generators&#34;&gt;Templates and Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/freelance-web-development/#hand-off&#34;&gt;Hand Off&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;my-work&#34;&gt;My Work&lt;/h2&gt;

&lt;p&gt;In my career, I&amp;rsquo;ve done some freelance work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://leviandangie.bertoort.com/&#34;&gt;Wedding Site&lt;/a&gt; - &lt;a href=&#34;https://bitbucket.org/bertoort/front-end-levi-and-angie&#34;&gt;Ember Code&lt;/a&gt; and &lt;a href=&#34;https://bitbucket.org/bertoort/back-end-levi-and-angie&#34;&gt;Rails Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://numinousbodywork.com/&#34;&gt;Business Site&lt;/a&gt; - &lt;a href=&#34;https://github.com/berto/numinousbodywork&#34;&gt;Code&lt;/a&gt; using a static site generator (Hugo)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rjtravels.world/&#34;&gt;Travel Blog&lt;/a&gt; - &lt;a href=&#34;https://github.com/berto/rj-travels&#34;&gt;Rails Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All which have been done more as favors with little compensation. It was mostly to explore the idea of freelancing
and what it entails for a web developer.&lt;/p&gt;

&lt;p&gt;Should you do it? If you&amp;rsquo;re a web developer and you&amp;rsquo;re considering doing freelancing, I can&amp;rsquo;t tell you whether it&amp;rsquo;s
a good idea or not, but I can share my experience and advice on it.&lt;/p&gt;

&lt;h2 id=&#34;how-to-freelance&#34;&gt;How to Freelance&lt;/h2&gt;

&lt;p&gt;To be a freelancer you need to be a business man. Regardless if you&amp;rsquo;re building a site for a friend or building sites for
money, they are the client and you are the seller.&lt;/p&gt;

&lt;p&gt;The benefit of working with a friend is that you don&amp;rsquo;t have to worry about legalities. As a personal business, there is
always the chance that someone can sue you or not pay you. Make sure to have a lawyer or look online for legal
contracts that can protect you.&lt;/p&gt;

&lt;p&gt;Personally, I don&amp;rsquo;t have a freelancing business so I can&amp;rsquo;t talk much about that. I can talk about working with a client,
figuring out due dates, requirements, and managing expectations.&lt;/p&gt;

&lt;h2 id=&#34;setting-expectations&#34;&gt;Setting Expectations&lt;/h2&gt;

&lt;p&gt;Before building anything, it is crucial talk about expectations with your client. I inquire about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What kind of website do you want?&lt;/li&gt;
&lt;li&gt;Do you have any design ideas or examples?&lt;/li&gt;
&lt;li&gt;When do you need the site to be done by?&lt;/li&gt;
&lt;li&gt;What content do you have available (images, writings, etc.)?&lt;/li&gt;
&lt;li&gt;How often do you foresee yourself wanting to make changes?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal is to learn what your client wants and how much work it&amp;rsquo;s going to take from you. If they have the design all
done with images available, you don&amp;rsquo;t have to do mockups. If they want dynamic content, you&amp;rsquo;ll need a server with back
end configurations. If they want to make constant changes, you will also need to build their interface to add content.&lt;/p&gt;

&lt;p&gt;Ask tons of questions. After getting a good sense of what they need, you can be more honest about meeting their deadline
and how much it&amp;rsquo;s going to cost. I encourage charging per hour, not per project. Clients have a tendency to change their
mind and add new features.&lt;/p&gt;

&lt;p&gt;Be Agile about it too. Don&amp;rsquo;t tell them it&amp;rsquo;ll be done by a certain time, give them a rough estimate and work on iterations.
Tell them you&amp;rsquo;ll work on a few features and check back weekly to show your progress. At each meeting, reevaluate the plan
and tell them what you&amp;rsquo;ll be working on for the week.&lt;/p&gt;

&lt;h2 id=&#34;templates-and-generators&#34;&gt;Templates and Generators&lt;/h2&gt;

&lt;p&gt;Now that you are clear with what you&amp;rsquo;re building, it&amp;rsquo;s time to start coding.&lt;/p&gt;

&lt;p&gt;Content Management Systems, such as Wordpress or Drupal, are ideal for freelancers. They have great templates so
you don&amp;rsquo;t have to build everything from scratch, they have great support for deploying and hosting, and most importantly,
excellent GUI for your clients to manage their site after you build it. The down side is that you have to learn a lot on
how to use a CMS which takes a lot of work.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want to learn how to use a CMS, you can do it my way and look into &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;static site generators&lt;/a&gt;
or frameworks like Ember or Rails that make web development easier.&lt;/p&gt;

&lt;p&gt;A lot of the work goes into front-end development. I like to use free templates from the web like &lt;a href=&#34;https://html5up.net/&#34;&gt;HTML5 UP&lt;/a&gt;
whenever possible.&lt;/p&gt;

&lt;h2 id=&#34;hand-off&#34;&gt;Hand Off&lt;/h2&gt;

&lt;p&gt;Something to keep in mind from the beginning is the work required after the site is built. What if your client wants
to add a new feature or there is a little bug?&lt;/p&gt;

&lt;p&gt;The easiest way is to hand off everything to the client and they can hire you again if they want more work to be done
to the site. I create an email account for the user, purchase domains, hosting services, and other services with that
account and have the client own it. Any hosting or set up fees I have the client pay themselves or reimburse me.&lt;/p&gt;

&lt;p&gt;I like to use AWS services for price and convenience: &lt;a href=&#34;https://aws.amazon.com/ec2/&#34;&gt;EC2&lt;/a&gt; for web hosting and &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;S3&lt;/a&gt; for static hosting or images.&lt;/p&gt;

&lt;p&gt;You want to set it up so any developer can pick up from where you left off. Be organized and write necessary documentation.
It&amp;rsquo;s good practice and helpful even for you when you go back to the project after a long period of time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/starcrafts_3.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vuex vs React Redux</title>
      <link>https://berto.github.io/blog/vuex-vs-react-redux/</link>
      <pubDate>Sat, 27 May 2017 22:25:43 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/vuex-vs-react-redux/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/vuejs/vuex&#34;&gt;Vuex&lt;/a&gt; introduced me to another way of implementing Flux.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://facebook.github.io/flux/&#34;&gt;Flux&lt;/a&gt; is an &amp;ldquo;APPLICATION ARCHITECTURE FOR BUILDING USER INTERFACES&amp;rdquo;. If you ever build a single
page app with multiple routes and nested components, managing state is a nightmare.
Flux makes it easier to manage and it makes sense. I&amp;rsquo;ve used it in multiple react apps with &lt;a href=&#34;http://redux.js.org/&#34;&gt;Redux&lt;/a&gt;,
&lt;a href=&#34;https://github.com/berto/peer-review&#34;&gt;Peer Review&lt;/a&gt; being my last one,
and it&amp;rsquo;s helpful. It takes a lot of work to set up and multiple files, but it makes sense in large applications.&lt;/p&gt;

&lt;p&gt;I found the way &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; implements Flux to make more sense. I recently gave a talk at
the Vue meetup about setting up Vuex from scratch (video below). This talk highlights the difference in jargon
and flow of communication.&lt;/p&gt;

&lt;p&gt;The biggest difference is that Vuex out of the box handles asynchronous events and
the way to change state is with Mutations, which, as the name suggests, mutates the state instead of having
the state immutable and replacing it with Reducers. Personally this is easier to reason about and is what
you want to do anyways.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/berto/vuex-demo&#34;&gt;Code&lt;/a&gt; and &lt;a href=&#34;https://slides.com/robertoortega/vuex/live#/&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/I936jW7QbjM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
  

&lt;p&gt;&lt;img src=&#34;img/starcrafts_2.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Image To Font</title>
      <link>https://berto.github.io/blog/image-to-font/</link>
      <pubDate>Sat, 15 Apr 2017 22:25:43 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/image-to-font/</guid>
      <description>

&lt;style&gt;
  @font-face {
    font-family: &#39;Logo&#39;;
    font-style: normal;
    src: url(&#39;https://rawgit.com/berto/numinousbodywork/master/themes/hugo-future-imperfect/static/fonts/icomoon.ttf&#39;);
  }
  .icon-logo {
    line-height: 1em;
    font-size: 500%;
    font-family: &#34;logo&#34;;
    transition: color 1s;
  }
  .icon-logo:hover {
    color: rebeccapurple;
  }
  .small {
    font-size: 100%;
  }
&lt;/style&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/image-to-font/#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/image-to-font/#from-pixels-to-vectors&#34;&gt;From Pixels to Vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/image-to-font/#from-svg-to-font&#34;&gt;From SVG To Font&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/image-to-font/#include-with-css&#34;&gt;Include With CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Recently I ran into the challenge of turning an image that a client provided into an icon.
In order to use it as an icon, I had to included as a font in the CSS.&lt;/p&gt;

&lt;p&gt;This blog will walk through the steps and resources I used to make this font icon &lt;span class=&#34;icon-logo small&#34;&gt;&amp;#xe900;&lt;/span&gt; from a png.&lt;/p&gt;

&lt;h3 id=&#34;icon&#34;&gt;Icon&lt;/h3&gt;

&lt;p&gt;&lt;span class=&#34;icon-logo&#34;&gt;&amp;#xe900;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;png&#34;&gt;PNG&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/berto/numinousbodywork/623b7a89/themes/hugo-future-imperfect/static/img/logo.png&#34; width=&#34;100&#34; height=&#34;100&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;from-pixels-to-vectors&#34;&gt;From Pixels To Vectors&lt;/h2&gt;

&lt;p&gt;The first step is to turn the &lt;code&gt;png&lt;/code&gt; into &lt;code&gt;svg&lt;/code&gt;. Portable Network Graphics (PNG) is a raster graphics file format.
Raster images are made out of pixels. For fonts, we want vectors. Vector images are mathematical calculations from
one point to another that form lines and shapes. Scalable Vector Graphics (SVG) is an XML-based vector image format.&lt;/p&gt;

&lt;p&gt;To turn the &lt;code&gt;png&lt;/code&gt; into &lt;code&gt;svg&lt;/code&gt; we need a vector graphics app. The industry standard is &lt;a href=&#34;http://www.adobe.com/products/illustrator.html&#34;&gt;Adobe Illustrator&lt;/a&gt;
if you can affort it. I used the OSS &lt;a href=&#34;https://inkscape.org/en/&#34;&gt;Inkscape&lt;/a&gt;, which is awesome!&lt;/p&gt;

&lt;p&gt;After uploading the image to the app, I followed &lt;a href=&#34;http://www.thenoncraftycrafter.com/2015/02/inkscape.html&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;from-svg-to-font&#34;&gt;From SVG To Font&lt;/h2&gt;

&lt;p&gt;Now that you have the &lt;code&gt;svg&lt;/code&gt; format of the image, we need to crate a font family. After little googling I found &lt;a href=&#34;https://icomoon.io/&#34;&gt;IcoMoon&lt;/a&gt;.
It is a great app to make fonts out of &lt;code&gt;svg&lt;/code&gt;&amp;rsquo;s for free. If you use it correctly, it will generate multiple font file formats that include your icon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;icomoon.eot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icomoon.svg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icomoon.ttf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icomoon.woff&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;include-with-css&#34;&gt;Include with CSS&lt;/h2&gt;

&lt;p&gt;The last step is to include the font into your website. First, create a font-face:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;  @font-face {
    font-family: &#39;Logo&#39;;
    font-style: normal;
    src: url(&#39;path/to/icomoon.ttf&#39;);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apply font family rule&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;  .icon-logo {
    font-family: &amp;quot;logo&amp;quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Include into HTML. The HTML symbol for the icon is defined when you crate the font with IcoMoon.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;  &amp;lt;span class=&amp;quot;icon-logo&amp;quot;&amp;gt;&amp;amp;#xe900;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/starcrafts_1.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Store User Images</title>
      <link>https://berto.github.io/blog/how-to-store-user-images/</link>
      <pubDate>Thu, 23 Mar 2017 22:25:43 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/how-to-store-user-images/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/how-to-store-user-images/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/how-to-store-user-images/#ways-of-storing-images&#34;&gt;Ways of Storing Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/how-to-store-user-images/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;You want your users to be able to upload images, profile pictures, receipts, and so on, but you are not sure where to
save it or how to do it.&lt;/p&gt;

&lt;p&gt;This is a short blog addressing this issue. I will talk about the different ways, but more importantly, link to a
demo repo that walks through the process of uploading images using Amazon Services.&lt;/p&gt;

&lt;h2 id=&#34;ways-of-storing-images&#34;&gt;Ways of storing images&lt;/h2&gt;

&lt;p&gt;There are many ways to approach it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File System&lt;/li&gt;
&lt;li&gt;DB (mysql, postgresql)&lt;/li&gt;
&lt;li&gt;Third party (AWS, Cloudinary)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First off, you need a client to grab the image and send it to the client. Then, the server can parse the image
and store it. Storing it on your file system is a possibility but highly discouraged. It&amp;rsquo;s difficult to guarantee
data consistency. The better way is using a database. The downside is memory space and managing images as blobs
(Binary Large OBjectS).&lt;/p&gt;

&lt;p&gt;I encourage using a third party such as &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;AWS S3&lt;/a&gt; or &lt;a href=&#34;http://cloudinary.com/&#34;&gt;Cloudinary&lt;/a&gt;.
Using their API might take a second to learn but it saves time not worrying about missing or corrupted files, limited
server storage or parsing and displaying blobs.&lt;/p&gt;

&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;

&lt;p&gt;So how do you use a third party service like S3? &lt;a href=&#34;https://github.com/berto/s3-image-upload-demo&#34;&gt;This demo&lt;/a&gt; has a
great readme and walks through the process using node. The concepts should easily transfer to other languages or
cloud providers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have the client grab the user image. e.g. using an input tag type upload.&lt;/li&gt;
&lt;li&gt;Send a post request to the server. You might be able to send it to a third party straight from the client,
but it&amp;rsquo;s best to handle it with a server.&lt;/li&gt;
&lt;li&gt;Parse the image blob from the body. Look for a middleware to parse &lt;code&gt;multipart/form-data&lt;/code&gt; content type.&lt;/li&gt;
&lt;li&gt;Post image to the third party using their API.&lt;/li&gt;
&lt;li&gt;Grab image id or address to reference. I recommend using a uuid.&lt;/li&gt;
&lt;li&gt;Store image id or address to your database to associate with the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;img/starcrafts_0.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Haskell</title>
      <link>https://berto.github.io/blog/introduction-to-haskell/</link>
      <pubDate>Thu, 02 Feb 2017 23:55:51 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/introduction-to-haskell/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/introduction-to-haskell/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/introduction-to-haskell/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/introduction-to-haskell/#syntax&#34;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/introduction-to-haskell/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I came to discover &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt; is a wonderful programming language. The fact that it is statically typed and purely functional grabbed my attention (it is also described as a declarative language, regardless of how impossible it is to read).&lt;/p&gt;

&lt;p&gt;This blog is an open record of how I came to create a simple &lt;a href=&#34;https://github.com/berto/terminal-countdown-timer&#34;&gt;CLI timer&lt;/a&gt; with Haskell and what I learned from it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/projects/timer.gif&#34; alt=&#34;timer&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;GETTING STARTED&lt;/h2&gt;

&lt;p&gt;Ridiculously painless. First, read as much as you can of &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;Learn You A Haskell&lt;/a&gt;. It is the best programming book I&amp;rsquo;ve ever read.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re ready to code, go &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;here&lt;/a&gt; and download the latest version of the Haskell Platform.&lt;/p&gt;

&lt;p&gt;On top of installing Haskell, it also gives you &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; to compile the code. It comes with an interactive environment for the terminal. Type &lt;code&gt;ghci&lt;/code&gt; to play around.&lt;/p&gt;

&lt;p&gt;Lastly, the platform comes with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt;. Cabal is &lt;a href=&#34;https://ivanmiljenovic.wordpress.com/2010/03/15/repeat-after-me-cabal-is-not-a-package-manager/&#34;&gt;not a package manager&lt;/a&gt;, even though it contains information about the packages. It is part of the ecosystem, along with &lt;a href=&#34;http://hackage.haskell.org/packages/hackage.html&#34;&gt;HaskellDB&lt;/a&gt; and cabal-install to manage your packages.&lt;/p&gt;

&lt;p&gt;All and all, I used Cabal to get the libraries and packages that i needed (like a package manager). I also used &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Stack&lt;/a&gt;. It is a wonderful program for developing Haskell apps. It scaffolds a beautiful app with tests. Install by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sSL https://get.haskellstack.org/ | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then use it with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stack new my-project
cd my-project
stack setup
stack build
stack exec my-project-exe
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;development&#34;&gt;DEVELOPMENT&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;stack new my-project&lt;/code&gt; to get started. When you generate a new project, Stack gives you the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── LICENSE
├── Setup.hs
├── app
│   └── Main.hs
├── my-project.cabal
├── src
│   └── Lib.hs
├── stack.yaml
└── test
    └── Spec.hs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like &lt;code&gt;Java&lt;/code&gt; and other compiled languages, the &lt;code&gt;main&lt;/code&gt; package contains the main function of the application. You will notice a &lt;code&gt;Lib&lt;/code&gt; package being imported in &lt;code&gt;Main.hs&lt;/code&gt;. This is an example of importing custom packages from the &lt;code&gt;src&lt;/code&gt; directory.
You can create a package by creating a file in the &lt;code&gt;src&lt;/code&gt; directory and adding it to the &lt;code&gt;.cabal&lt;/code&gt; file&amp;rsquo;s &lt;code&gt;exposed-modules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I found myself editing the &lt;code&gt;*.cabal&lt;/code&gt; file quite often. This is where your project information lives and you specify the package imports.&lt;/p&gt;

&lt;p&gt;For importing third party packages, install them using &lt;code&gt;cabal&lt;/code&gt; and then add them to the &lt;code&gt;build-depends&lt;/code&gt;. For example, I used &lt;code&gt;hspec&lt;/code&gt; for tests, so I ran &lt;code&gt;cabal install hspec&lt;/code&gt; and then added &lt;code&gt;hspec   == 2.*&lt;/code&gt; to the dependencies. Here you can find an example of my &lt;a href=&#34;https://github.com/berto/terminal-countdown-timer/blob/master/terminal-countdown-timer.cabal&#34;&gt;.cabal file&lt;/a&gt; and the &lt;a href=&#34;https://github.com/berto/terminal-countdown-timer/blob/master/test/Spec.hs&#34;&gt;tests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create your own packages, start by defining the module name, the functions to by exported surrounded by parenthesis, and the keyword &lt;code&gt;where&lt;/code&gt;. This is the example from the &lt;code&gt;Lib&lt;/code&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Lib
    ( someFunc
    ) where

someFunc :: IO ()
someFunc = putStrLn &amp;quot;someFunc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, when the package is imported, all the exported functions will be available globally.&lt;/p&gt;

&lt;p&gt;I only had a problem with certain packages being hidden by Cabal that Stack wasn&amp;rsquo;t able to access. If this ever happens, I worked around it by including a flag in the build command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stack build --ghc-options=&amp;quot;-package [container-name]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;syntax&#34;&gt;SYNTAX&lt;/h2&gt;

&lt;p&gt;Again, I highly suggest reading &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;Learn You A Haskell&lt;/a&gt; to explore the language. I do want to highlight a few areas that stood out to me:&lt;/p&gt;

&lt;h4 id=&#34;optionally-statically-typed&#34;&gt;Optionally Statically Typed&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;lpad :: Int -&amp;gt; [Int] -&amp;gt; [Int]
lpad m xs = replicate (m - length ys) 0 ++ ys
    where ys = take m xs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, the first line defining the function is &lt;code&gt;lpad :: Int -&amp;gt; [Int] -&amp;gt; [Int]&lt;/code&gt;. This is the syntax for declaring the input and output of the function, first the name, then the &lt;code&gt;::&lt;/code&gt; and then the parameters separated by &lt;code&gt;-&amp;gt;&lt;/code&gt;&amp;rsquo;s.
The last type is the output. In this example, the function &lt;code&gt;lpad&lt;/code&gt; takes an integer and a list of integers and returns another list of integers.&lt;/p&gt;

&lt;p&gt;This is completely optional though. It is considered good practice to give functions type declarations but it is not required. The compiler will do just fine without it. Read &lt;a href=&#34;http://learnyouahaskell.com/types-and-typeclasses&#34;&gt;this chapter&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h4 id=&#34;extensive-list-of-operators&#34;&gt;Extensive List of Operators&lt;/h4&gt;

&lt;p&gt;Haskell, and other functional languages, are mathematical and full of operators. &lt;a href=&#34;http://www.imada.sdu.dk/~rolf/Edu/DM22/F06/haskell-operatorer.pdf&#34;&gt;Here&lt;/a&gt; is a list of them.&lt;/p&gt;

&lt;p&gt;I find them unwelcoming when learning the language. They simplify the code to an extend that it looks beautiful but quite difficult to read. As a beginner, I found myself constantly looking up their definition.&lt;/p&gt;

&lt;p&gt;My favorite ended up being the &lt;code&gt;$&lt;/code&gt; that is an abstraction of &lt;code&gt;()&lt;/code&gt;&amp;rsquo;s in the way of grouping the order of execution. &lt;code&gt;sum (1 * 8)&lt;/code&gt; is the same as &lt;code&gt;sum $ 1 * 8&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;the-importance-of-pattern-matching&#34;&gt;The Importance of Pattern Matching&lt;/h4&gt;

&lt;p&gt;In the &lt;a href=&#34;http://learnyouahaskell.com/syntax-in-functions&#34;&gt;Syntax in Functions&lt;/a&gt; chapter, you can see Haskell&amp;rsquo;s ability to do pattern matching. There are so many ways to do &lt;code&gt;if&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;You can define a function to behave differently depending on the input with standard &lt;code&gt;if&lt;/code&gt; statements, &lt;a href=&#34;https://wiki.haskell.org/Pattern_guard&#34;&gt;guards&lt;/a&gt;, or more interestingly, the way you define the function. Here is an example from the book:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sayMe :: (Integral a) =&amp;gt; a -&amp;gt; String  
sayMe 1 = &amp;quot;One!&amp;quot;  
sayMe 2 = &amp;quot;Two!&amp;quot;  
sayMe 3 = &amp;quot;Three!&amp;quot;  
sayMe 4 = &amp;quot;Four!&amp;quot;  
sayMe 5 = &amp;quot;Five!&amp;quot;  
sayMe x = &amp;quot;Not between 1 and 5&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the input is 1, the function will return &amp;ldquo;One!&amp;rdquo;, if it&amp;rsquo;s 2, &amp;ldquo;Two!, and so on. In the last case, it will handle any other input as a variable &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;flexible-inputs-and-outputs&#34;&gt;Flexible Inputs and Outputs&lt;/h4&gt;

&lt;p&gt;In the code example above, you may have noticed the type &lt;code&gt;a&lt;/code&gt; in the function declaration. This is Haskell&amp;rsquo;s &lt;a href=&#34;https://wiki.haskell.org/Generics&#34;&gt;Generics&lt;/a&gt;. They are great for allowing flexible inputs and outputs in a function. That means that the function &lt;code&gt;sayMe&lt;/code&gt; could take any type of input.&lt;/p&gt;

&lt;p&gt;Haskell also has a &lt;a href=&#34;https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Maybe.html&#34;&gt;Maybe&lt;/a&gt; and &lt;a href=&#34;https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Either.html&#34;&gt;Either&lt;/a&gt; type. This I found really interesting, where you define the possibility of the outcome. In the case of &lt;code&gt;Maybe&lt;/code&gt;, you get &lt;code&gt;Just&lt;/code&gt; the type you defined or &lt;code&gt;Nothing&lt;/code&gt; back.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f::Int -&amp;gt; Maybe Int
f 0 = Nothing
f x = Just x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;Either&lt;/code&gt;, you &lt;code&gt;Either&lt;/code&gt; get the &lt;code&gt;Right&lt;/code&gt; or the &lt;code&gt;Left&lt;/code&gt; type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f1 :: Int -&amp;gt; Either String Int
f1 arg = if arg == 42
             then Left &amp;quot;can&#39;t work with 42&amp;quot;
             else Right (arg + 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;Either&lt;/code&gt; output flexibility is great for error handling.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;CONCLUSION&lt;/h2&gt;

&lt;p&gt;Haskell is a blast. I must admit, I made rookie mistakes of trying to define an accumulator variable at global scope and trying to change the nth number of a list. In functional programming, there is no state or mutations.&lt;/p&gt;

&lt;p&gt;The way of thinking is different. More recursion, math, modularity, and simplicity. I like the process of composing my code, brick by brick. Refactoring and modification was a peaceful process.&lt;/p&gt;

&lt;p&gt;I encourage all to give it a shot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/gopher7.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making This Site with Hugo</title>
      <link>https://berto.github.io/blog/making-this-site-with-hugo/</link>
      <pubDate>Sat, 03 Dec 2016 23:46:44 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/making-this-site-with-hugo/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/making-this-site-with-hugo/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/making-this-site-with-hugo/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/making-this-site-with-hugo/#picking-a-theme&#34;&gt;Picking A Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/making-this-site-with-hugo/#generating-an-app&#34;&gt;Generating An App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/making-this-site-with-hugo/#customizing-the-app&#34;&gt;Customizing The App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/making-this-site-with-hugo/#adding-content&#34;&gt;Adding Content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/making-this-site-with-hugo/#deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/making-this-site-with-hugo/#next-steps&#34;&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;INTRODUCTION&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://davidwalsh.name/introduction-static-site-generators&#34;&gt;Static site generators&lt;/a&gt; are fun.
After building many sites, being able to scaffold one in minutes can be extremely convenient.
If the goal is to write a blog, there is no need to wireframe, create the html layout, style, etc. Simply generate the app and start typing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is my favorite static site generator. If you know me, the fact that it is written in &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; already wins my heart.
But it&amp;rsquo;s also ridiculously fast and easy to use. I will do my best to demonstrate such ease to get a site up and going in minutes.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;INSTALLATION&lt;/h2&gt;

&lt;p&gt;If you have a Mac and &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, look into the &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;release list.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;picking-a-theme&#34;&gt;PICKING A THEME&lt;/h2&gt;

&lt;p&gt;Before entering any commands or coding a single character, I like to plan and know what I am making.&lt;/p&gt;

&lt;p&gt;The first step for us is to pick out a theme. Here is an &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;extensive list&lt;/a&gt; that keeps growing everyday.&lt;/p&gt;

&lt;p&gt;When picking a theme, make sure it has the layout and features you will need. Think of navigation bar, routes, and customization. Most themes provide a demo to play around with.&lt;/p&gt;

&lt;p&gt;It is not a deal breaker if it doesn&amp;rsquo;t have everything you need. You can customize a theme fairly easy, but it is less work overall.&lt;/p&gt;

&lt;p&gt;After picking a theme, make sure to find the &lt;code&gt;config.toml&lt;/code&gt; file, we will need this to configure our app.&lt;/p&gt;

&lt;h2 id=&#34;generating-an-app&#34;&gt;GENERATING AN APP&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;hugo&lt;/code&gt; commands are pretty straightforward. To start:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will immediately create an app in the current directory, hence the &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s add our theme. Go to the source code of the theme. &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;Here&lt;/a&gt; is the repo containing all the themes. For this site, I used the &lt;a href=&#34;https://github.com/fuegowolf/cocoa-eh-hugo-theme&#34;&gt;cocoa-eh&lt;/a&gt; theme.&lt;/p&gt;

&lt;p&gt;To add it, simply clone it with &lt;code&gt;git&lt;/code&gt; into a themes directory. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/fuegowolf/cocoa-eh-hugo-theme.git ./themes/cocoa-eh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the &lt;code&gt;config.toml&lt;/code&gt; file provided by the theme to the root of the project. Sometimes it is easily provided by the theme, other times look into the demo source code. &lt;a href=&#34;https://github.com/fuegowolf/cocoa-eh-hugo-theme/blob/master/exampleSite/config.toml&#34;&gt;This&lt;/a&gt; is an example of one.&lt;/p&gt;

&lt;p&gt;Customize it with your information.&lt;/p&gt;

&lt;p&gt;When that&amp;rsquo;s done, serve the application with the new theme&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new site should be up and running on &lt;code&gt;localhost:1313&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;customizing-the-app&#34;&gt;CUSTOMIZING THE APP&lt;/h2&gt;

&lt;p&gt;As I mentioned before, customizing a &lt;code&gt;hugo&lt;/code&gt; app is fairly easy. Inside the theme directory, there is &lt;code&gt;layouts&lt;/code&gt; and a &lt;code&gt;static&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;static&lt;/code&gt; directory is where you can add any assets, &lt;code&gt;css&lt;/code&gt;, or &lt;code&gt;js&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Link to them in the &lt;code&gt;layouts&lt;/code&gt; directory. Inside the &lt;code&gt;partials&lt;/code&gt;, you&amp;rsquo;ll find the header and footer to add any scripts.&lt;/p&gt;

&lt;p&gt;The one unfamiliar syntax you might find is the &amp;ldquo;Actions&amp;rdquo; surrounded by &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;. This is &lt;a href=&#34;https://golang.org/pkg/text/template/&#34;&gt;Go&amp;rsquo;s Template&lt;/a&gt; syntax, very similar to &lt;a href=&#34;http://handlebarsjs.com/&#34;&gt;Handlebars&lt;/a&gt;. The &amp;ldquo;Actions&amp;rdquo; are basically arguments or pipelines to add value and logic to the template.&lt;/p&gt;

&lt;p&gt;In our case, we can use it to link to our files with the correct path. There are many variables available, the one we will use is &lt;code&gt;{{ .Site.BaseURL }}&lt;/code&gt;, which as you might have guessed, represents your app URL defined in the &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;{{ .Site.BaseURL }}/js/app.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-content&#34;&gt;ADDING CONTENT&lt;/h2&gt;

&lt;p&gt;Depending on the type of site, we will want to add some personal content. Inside the project, there is a &lt;code&gt;contents&lt;/code&gt; directory. This is where the markdown files live and are parsed into html from.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hugo&lt;/code&gt; themes will usually specify what files it is looking for. Some common ones are &lt;code&gt;about.md&lt;/code&gt;, &lt;code&gt;blog/&lt;/code&gt;, and &lt;code&gt;projects/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can create these files manually, but the preferred method is to generate them with &lt;code&gt;hugo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new blog/this-is-a-new-blog.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deployment&#34;&gt;DEPLOYMENT&lt;/h2&gt;

&lt;p&gt;So far we&amp;rsquo;ve been running a &lt;code&gt;hugo&lt;/code&gt; server to edit our new application. To generate the static files with our theme, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t [theme-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! The &lt;code&gt;public&lt;/code&gt; directory will contain our new and wonderful application. You can deploy it to any static site host. &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; is my host of choice. There is a nice tutorial &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;here&lt;/a&gt; to create a &lt;code&gt;deploy.sh&lt;/code&gt; for easy deployment.&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;NEXT STEPS&lt;/h2&gt;

&lt;p&gt;Checkout &lt;a href=&#34;https://github.com/berto/berto.github.io&#34;&gt;this site&amp;rsquo;s repo&lt;/a&gt; for more code examples.&lt;/p&gt;

&lt;p&gt;If you find yourself customizing a lot of your theme, I highly encourage you to &lt;a href=&#34;https://gohugo.io/themes/creation/&#34;&gt;create your own hugo theme&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, feel free to checkout &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;other static site generators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/gopher6.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Video Recording App with AWS S3 and a Raspberry Pi</title>
      <link>https://berto.github.io/blog/building-a-video-recording-app-with-aws-s3-and-a-raspberry-pi/</link>
      <pubDate>Sat, 15 Oct 2016 23:08:47 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/building-a-video-recording-app-with-aws-s3-and-a-raspberry-pi/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/building-a-video-recording-app-with-aws-s3-and-a-raspberry-pi/#app-design&#34;&gt;App Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/building-a-video-recording-app-with-aws-s3-and-a-raspberry-pi/#baking-the-pie&#34;&gt;Baking the Pie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/building-a-video-recording-app-with-aws-s3-and-a-raspberry-pi/#picture-scripts&#34;&gt;Picture Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/building-a-video-recording-app-with-aws-s3-and-a-raspberry-pi/#aws-s3-bucket&#34;&gt;AWS S3 Bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/building-a-video-recording-app-with-aws-s3-and-a-raspberry-pi/#streaming-app&#34;&gt;Streaming App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;app-design&#34;&gt;APP DESIGN&lt;/h2&gt;

&lt;p&gt;As a personal project, I decided to attach a camera to a &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; , upload the pictures to &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;Amazon s3&lt;/a&gt;, and then build a &lt;a href=&#34;https://s3-time-lapse.herokuapp.com/devteam&#34;&gt;website&lt;/a&gt; to loop through the pictures.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/time-lapse.gif&#34; alt=&#34;time-lapse&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After reading this blog, you should have a clear picture on how to build a basic &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_of_things&#34;&gt;IoT&lt;/a&gt; project. I will do my best to provide the resources and step-by-step instructions on how to do it yourself, from setting up a Pi to accessing images in S3 buckets.&lt;/p&gt;

&lt;p&gt;The total budget was about $100. Mostly on the &lt;a href=&#34;https://www.amazon.com/gp/product/B00LQ854AG/ref=oh_aui_detailpage_o03_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;web camera&lt;/a&gt;, the &lt;a href=&#34;https://www.amazon.com/Raspberry-Pi-RASP-PI-3-Model-Motherboard/dp/B01CD5VC92/ref=lp_5811495011_1_1?srs=5811495011&amp;amp;ie=UTF8&amp;amp;qid=1475255454&amp;amp;sr=8-1&#34;&gt;Pi&lt;/a&gt;, &lt;a href=&#34;https://www.amazon.com/gp/product/B01CDVSBPO/ref=oh_aui_detailpage_o06_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;case&lt;/a&gt;, and &lt;a href=&#34;https://www.amazon.com/gp/product/B010Q57SEE/ref=oh_aui_detailpage_o06_s01?ie=UTF8&amp;amp;psc=1&#34;&gt;SD memory card&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;baking-the-pie&#34;&gt;BAKING THE PIE&lt;/h2&gt;

&lt;p&gt;By “bake”, I mean install an operating system and work envirnoment. The pi can be used with many operating systems through SD Cards. The most common one is &lt;a href=&#34;https://en.wikipedia.org/wiki/Raspbian&#34;&gt;Raspbian&lt;/a&gt;. Make sure to format the SD card so it’s clean and ready. I used &lt;a href=&#34;https://www.sdcard.org/downloads/formatter_4/eula_mac/&#34;&gt;SDFormatter&lt;/a&gt; with my mac.&lt;/p&gt;

&lt;h4 id=&#34;to-install&#34;&gt;To Install:&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;Download&lt;/a&gt; the latest version. If you have a mac, use the &lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/mac.md&#34;&gt;following steps&lt;/a&gt; to get started, otherwise look through &lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;to-use&#34;&gt;To Use:&lt;/h4&gt;

&lt;p&gt;The easiest way to use your new computer is with an HD monitor, mouse and keyboard. You will need this at the beginning. Ideally, you want a way to connect to your pi using your personal computer. That’s where &lt;a href=&#34;https://www.realvnc.com/download/viewer/&#34;&gt;VNC Viewer&lt;/a&gt; comes in. Download it to your personal computer and you’ll be ready to connect to the pi. The key point is setting up the pi to broadcast the remote server.&lt;/p&gt;

&lt;p&gt;Open up the terminal in the Raspberry Pi and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you are ready to install &lt;a href=&#34;http://www.tightvnc.com/&#34;&gt;Tight VNC&lt;/a&gt;. You will use this for remote access. &lt;a href=&#34;http://elinux.org/RPi_VNC_Server&#34;&gt;Here&lt;/a&gt; you can find detailed instructions on how to set it up. Basically, it will run a TightVNC Server whenever you boot the pi.&lt;/p&gt;

&lt;h4 id=&#34;to-connect&#34;&gt;To Connect:&lt;/h4&gt;

&lt;p&gt;You can use an ethernet cable but I prefer Wifi. After you hook up the raspberry pi with Wifi and TightVNC is running, find the &lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/ip-address.md&#34;&gt;IP Adress&lt;/a&gt;. Enter that IP as the VNC Server&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/tightvnc.png&#34; alt=&#34;tightvnc&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;extra-tip&#34;&gt;Extra Tip:&lt;/h4&gt;

&lt;p&gt;You can &lt;a href=&#34;https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md&#34;&gt;set up Wifi through the command line&lt;/a&gt;. It’s a convinient way to add known networks in advance. That way, in a new location, the pi should connect to the Wifi automatically and broadcast the server.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&#34;https://nmap.org/&#34;&gt;NMap&lt;/a&gt; you can find the the pi IP Address and connect to it. For a mac,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install nmap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, run &lt;code&gt;nmap&lt;/code&gt; with your personal computer’s IP address but replace the last set of numbers with zero and add /24&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap -sn [IP Address]/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;e.g. for 192.168.1.3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap -sn 192.168.1.0/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will scan the whole subnet for devices. In that list, you can find your pi.&lt;/p&gt;

&lt;h2 id=&#34;picture-scripts&#34;&gt;PICTURE SCRIPTS&lt;/h2&gt;

&lt;p&gt;Congratulations on setting up the Raspberry Pi! The next part is taking pictures.&lt;/p&gt;

&lt;p&gt;I used a usb webcam and &lt;a href=&#34;https://www.sanslogic.co.uk/fswebcam/&#34;&gt;fswebcam&lt;/a&gt; to do that. Follow &lt;a href=&#34;https://www.sanslogic.co.uk/fswebcam/&#34;&gt;these easy instructions&lt;/a&gt; to get started. The blog shows how to install &lt;code&gt;fswebcam&lt;/code&gt;, take pictures, and have it on a timer to do it automatically.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Cron&#34;&gt;cron job&lt;/a&gt; is key for defining the number of pictures to take and how often. Obviosly, the more images the better the recording but there’s a limit in memory. That’s where AWS S3 comes in.&lt;/p&gt;

&lt;h2 id=&#34;aws-s3-bucket&#34;&gt;AWS S3 BUCKET&lt;/h2&gt;

&lt;p&gt;I recommend Amazon S3 because it’s free and easy to store images. Go to &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt; and create an account. Then, under your security credentials, create an &lt;a href=&#34;http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html&#34;&gt;Access Key ID and Secret Access Key&lt;/a&gt;. You will use this to upload images.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;s3cmd&lt;/code&gt; is a tool to easly upload images to s3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install s3cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://s3tools.org/usage&#34;&gt;Here&lt;/a&gt; are the usage docs. You will want to then configure it with your Access Key and Secret&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s3cmd --configure
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Follow the prompts.&lt;/p&gt;

&lt;p&gt;Then create a bucket to contain your images&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s3cmd mb s3://BUCKET
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the &lt;code&gt;fswebcam&lt;/code&gt; script to upload the image and then delete it from the Raspberry Pi&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s3cmd put FILE [FILE...] s3://BUCKET[/PREFIX]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;rm FILE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this works correctly, you should be able to see the images in your &lt;a href=&#34;https://console.aws.amazon.com/s3/home&#34;&gt;AWS Console&lt;/a&gt; and permanetly remove from your pi memory storage.&lt;/p&gt;

&lt;h2 id=&#34;streaming-app&#34;&gt;STREAMING APP&lt;/h2&gt;

&lt;p&gt;The app was my touch to easily display a timelapse of the images taken. You can find the &lt;a href=&#34;https://github.com/berto/time-lapse&#34;&gt;code here&lt;/a&gt;. It was written in Go using the &lt;a href=&#34;https://github.com/aws/aws-sdk-go&#34;&gt;AWS Go SDK&lt;/a&gt;. The app gets the images from Amazon, sends them to the client, and JavaScript displays them every second.&lt;/p&gt;

&lt;p&gt;This is where a lot of liberty can come in for the execution. For example, you can have an app with a button that will run the script and display the current image. That’s basically an instant home monitoring app. Have fun :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/gopher4.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Docker for Web Development</title>
      <link>https://berto.github.io/blog/using-docker-for-web-development/</link>
      <pubDate>Sun, 18 Sep 2016 22:48:16 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/using-docker-for-web-development/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;blog/using-docker-for-web-development/#all-aboard-the-hype-train-containership&#34;&gt;All Aboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;blog/using-docker-for-web-development/#building-an-app&#34;&gt;Building an App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;blog/using-docker-for-web-development/#dockerfile-and-docker-compose&#34;&gt;Dockerfil and Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;blog/using-docker-for-web-development/#next-steps&#34;&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;all-aboard-the-hype-train-containership&#34;&gt;ALL ABOARD THE HYPE &lt;em&gt;TRAIN&lt;/em&gt; CONTAINERSHIP&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.docker.com/what-docker&#34;&gt;Docker&lt;/a&gt; is popular for its lightweight ease of deployment. Make a container with only the images you need and boom! the perfect running environment. There are many guides that will go into detail on how Docker works and how to use it. However, I haven’t seen many guides that break down the use of it for development… and Docker is a great tool for development. In this blog, I aim to demonstrate such by creating an application while highlighting docker’s common tools and commands. By the end, you should be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build an image using Docker&lt;/li&gt;
&lt;li&gt;Create a container to run the application&lt;/li&gt;
&lt;li&gt;Describe and implement &lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#best-practices-for-writing-dockerfiles&#34;&gt;Dockerfile&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/compose/overview/#/common-use-cases&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you haven’t already, &lt;a href=&#34;https://www.docker.com/products/docker&#34;&gt;install&lt;/a&gt; the latest version, and let’s get started.&lt;/p&gt;

&lt;h2 id=&#34;building-an-app&#34;&gt;BUILDING AN APP&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; is a language that is particular about its environment set up. Which makes it a perfect example for using Docker.&lt;/p&gt;

&lt;p&gt;Let’s start with the basics. Create a &lt;code&gt;main.go&lt;/code&gt; file and add a simple hello world.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    fmt.Println(&amp;quot;Hello, 世界&amp;quot;)
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now type the following to run it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v $(pwd):/docker-example -w /docker-example golang sh -c &#39;go run main.go&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Hello, 世界&lt;/code&gt; should print.&lt;/p&gt;

&lt;p&gt;Simple right? Not really. And this is not how I use it but it’s a great place to start. So let’s take it bit by bit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; executes a command in a new container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt; removes the container after we exit (no need to keep this one)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; mounts a directory to the container. This is key to be able to edit the files on our machine&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(pwd):/docker-example&lt;/code&gt; takes our current directory and mounts it at &lt;code&gt;/docker-example&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w /docker-example&lt;/code&gt; changes the working directory to be the one we mounted&lt;/li&gt;
&lt;li&gt;&lt;code&gt;golang&lt;/code&gt; uses the &lt;a href=&#34;https://hub.docker.com/_/golang/&#34;&gt;official image&lt;/a&gt; to execute Go code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sh -c&lt;/code&gt; runs the shell command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;go run main.go&#39;&lt;/code&gt; is the Go command to run our file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Better? This command takes the &lt;code&gt;golang&lt;/code&gt; image and builds a new container that is deleted as soon as it exits.&lt;/p&gt;

&lt;p&gt;Let’s try it again, but this time we are going to keep the StandardIn open to interact with the container. First, let’s make our application a little more robust. We can use the sample application from one of my earlier posts&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
        &amp;quot;os&amp;quot;

        &amp;quot;github.com/gin-gonic/gin&amp;quot;
)

func main() {
        r := gin.Default()

        port := os.Getenv(&amp;quot;PORT&amp;quot;)
        if port == &amp;quot;&amp;quot; {
            port = &amp;quot;3000&amp;quot;
        }

        r.GET(&amp;quot;/&amp;quot;, func(c *gin.Context) {
            c.JSON(200, gin.H{
                &amp;quot;Docker&amp;quot;: &amp;quot;Is Awesome!&amp;quot;,
            })
        })

        r.Run(&amp;quot;:&amp;quot; + port)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --name docker-example -it -p 3000:3000 -v $(pwd):/go/src/docker-example golang /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We removed&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the shell command to run the app since we will be doing it manually&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt; to point us to the working directory since we can traverse with commands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt; to delete the container. Let’s keep this one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We added&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name&lt;/code&gt; to give it an alias so we can start it easier&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-it&lt;/code&gt; opens the STDIN&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 3000:3000&lt;/code&gt; opens a port. In this case, it maps port 3000 to our localhost:3000&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/bin/bash&lt;/code&gt; runs bash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We should be interacting with the container. Before the cursor, we should see &lt;code&gt;root@[some-container-id]&lt;/code&gt;. We can &lt;code&gt;cd src/docker-example&lt;/code&gt; and there we will find &lt;code&gt;main.go&lt;/code&gt;. Before we can run the file, we need to install the dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/gin-gonic/gin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can run it with &lt;code&gt;go run main.go&lt;/code&gt; and if we go to &lt;code&gt;localhost:3000&lt;/code&gt; on our broswer, we will see&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;Docker&amp;quot;: &amp;quot;Is Awesome!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay!! We did it! Since we mounted our files, any changes we make to this directory will reflect in our local directory so we can start developing…&lt;/p&gt;

&lt;p&gt;There’s only a few things to keep in mind. If we close the connection, we can connect again to our container with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker start -i docker-example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can delete it with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker rm docker-example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if someone else wants to work with the same container’s environment? We wouldn’t want to install all the dependencies manually. Also, typing that long command to create a container is highly inconvinient. That’s where Dockerfile and Docker Compose come to the rescue.&lt;/p&gt;

&lt;h2 id=&#34;dockerfile-and-docker-compose&#34;&gt;DOCKERFILE AND DOCKER COMPOSE&lt;/h2&gt;

&lt;p&gt;First, let’s tackle the problem with dependencies and environment set up with a Dockerfile. Like a &lt;a href=&#34;https://en.wikipedia.org/wiki/Makefile&#34;&gt;Makefile&lt;/a&gt; contains a set of directives to run, a &lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&#34;&gt;Dockerfile&lt;/a&gt; contains a list of commands to build an image. Instead of using the official &lt;code&gt;golang&lt;/code&gt; image, we want to use our image that is built on top of the &lt;code&gt;golang&lt;/code&gt; image.&lt;/p&gt;

&lt;p&gt;To do that, create a &lt;code&gt;Dockerfile&lt;/code&gt; and include the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM golang
RUN go get github.com/gin-gonic/gin
WORKDIR /go/src/docker-example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simply says to use the &lt;code&gt;golang&lt;/code&gt; image, install the &lt;code&gt;gin&lt;/code&gt; dependency, and change our working directory. Obviously our app is basic and doesn’t require much environment configuration. In the &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;docs&lt;/a&gt; we can read more about other options to include. For our purposes, this is all our image needs.&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;docker build -t docker-example .&lt;/code&gt; to build it. The &lt;code&gt;-t&lt;/code&gt; gives it a name of &lt;code&gt;docker-example&lt;/code&gt; and the &lt;code&gt;.&lt;/code&gt; points to the current directory.&lt;/p&gt;

&lt;p&gt;If all goes well, we can see the new image with &lt;code&gt;docker images&lt;/code&gt;. We can now use it to build our app container with the command we were using before but instead of &lt;code&gt;golang&lt;/code&gt; we use our &lt;code&gt;docker-example&lt;/code&gt; image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it -p 3000:3000 -v $(pwd):/go/src/docker-example docker-example /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, that command is painfully inconvinient to remember. Instead, let’s use &lt;a href=&#34;https://docs.docker.com/compose/overview/#/common-use-cases&#34;&gt;Docker Compose&lt;/a&gt; to create our container. Add a &lt;code&gt;docker-compose.yml&lt;/code&gt; file and include&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: &#39;2&#39;
services:
    web: 
       build: .
       command: go run main.go
       volumes:
           - .:/go/src/docker-example
       ports:
           - &amp;quot;3000:3000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The first two lines specify the version and the services available.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; points do the Dockerfile to build the image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;command&lt;/code&gt; tells it how to run our app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt; mounts the current directory like we were doing before with &lt;code&gt;-v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt; opens the port like &lt;code&gt;-p&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Build the image with &lt;code&gt;docker-compose build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And lastly, run the image with &lt;code&gt;docker-compose up&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/docker-compose.png&#34; alt=&#34;docker compose&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;NEXT STEPS&lt;/h2&gt;

&lt;p&gt;That’s a good start, but there’s plenty to go from here. Add a database or play with a different language: take a look at the &lt;a href=&#34;https://docs.docker.com/compose/rails/&#34;&gt;Docker Compose Rails Example&lt;/a&gt; to set up an app with a postgres image.&lt;/p&gt;

&lt;p&gt;Hopefully you’ll be enticed to use docker for your next personal project. If not, I leave you here two useful commands&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Delete all containers
docker rm $(docker ps -a -q)
# Delete all images
docker rmi $(docker images -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/gopher7.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Dotfiles Directory</title>
      <link>https://berto.github.io/blog/creating-a-dotfiles-directory/</link>
      <pubDate>Sat, 27 Aug 2016 22:40:54 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/creating-a-dotfiles-directory/</guid>
      <description>

&lt;p&gt;Not too complicated but highly useful. The purpose of doing this is to save your system configurations and host them somewhere. I have my &lt;a href=&#34;https://github.com/berto/dotfiles&#34;&gt;dotfiles&lt;/a&gt; on github to share with the public, store them in a safe place, and to easily transfer them to other environments like my ubuntu server.&lt;/p&gt;

&lt;p&gt;Start by creating a directory anywhere you want, inside your &lt;code&gt;projects&lt;/code&gt; or &lt;code&gt;$HOME&lt;/code&gt; directory. Then, copy all your dotfiles (.bashrc, .bash_profile, .vimrc, .gitconfig…) inside your new &lt;code&gt;dotfiles&lt;/code&gt; directory. I leave my &lt;code&gt;.profile&lt;/code&gt; for private configurations.&lt;/p&gt;

&lt;h2 id=&#34;symlinking-the-files&#34;&gt;SYMLINKING THE FILES&lt;/h2&gt;

&lt;p&gt;After adding all your desired dotfiles, it is time to link them to your &lt;code&gt;$HOME&lt;/code&gt; directory. This will replace the files with a symlink to the files inside the directory.&lt;/p&gt;

&lt;p&gt;To do this, add a bash script. Inside the &lt;code&gt;dotfiles&lt;/code&gt; directory, create a &lt;code&gt;symlink-dotfiles&lt;/code&gt; file and add&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

DOTFILES=(.gitconfig .gitignore .zshrc .vimrc .aliases)

#Remove old dotfiles and replace them
for dotfile in $(echo ${DOTFILES[*]});
do
    sudo rm -rf ~/$(echo $dotfile)
    ln -s ~/dotfiles/$(echo $dotfile) ~/$(echo $dotfile)
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script loops through the your desired files, removes them from home, and adds the symlink.&lt;/p&gt;

&lt;p&gt;Run it with with bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash symlink-dotfiles
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;that-s-it&#34;&gt;THAT’S IT!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/gopher3.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Friendly Guide to Setting Up VIM</title>
      <link>https://berto.github.io/blog/a-friendly-guide-to-setting-up-vim/</link>
      <pubDate>Tue, 16 Aug 2016 22:25:43 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/a-friendly-guide-to-setting-up-vim/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/a-friendly-guide-to-setting-up-vim/#why-vim&#34;&gt;Why Vim?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/a-friendly-guide-to-setting-up-vim/#previous-requirements&#34;&gt;Previous Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/a-friendly-guide-to-setting-up-vim/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/a-friendly-guide-to-setting-up-vim/#vimrc&#34;&gt;vimrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/a-friendly-guide-to-setting-up-vim/#personal-extras&#34;&gt;Personal Extras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/a-friendly-guide-to-setting-up-vim/#next-steps&#34;&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why-vim&#34;&gt;WHY VIM?&lt;/h2&gt;

&lt;p&gt;This blog will walk you step by step on how to setup vim and make it your new favorite text editor. &lt;a href=&#34;http://www.viemu.com/a-why-vi-vim.html&#34;&gt;But why?&lt;/a&gt; you may ask. Vim seems like a long walk for a short dive. It’s difficult to understand, set up, and learn to navigate.&lt;/p&gt;

&lt;p&gt;I like shortcuts and simply think it&amp;rsquo;s fun.&lt;/p&gt;

&lt;p&gt;I’m not going to try to convince you to use it, however, or even teach you how to use it. The goal is to help you get it set up quickly so you can start playing with it and then make your own judgement.&lt;/p&gt;

&lt;p&gt;Here is a preview of what you’ll be walking away with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/vim.png&#34; alt=&#34;vim&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;previous-requirements&#34;&gt;PREVIOUS REQUIREMENTS&lt;/h2&gt;

&lt;p&gt;I assume you use git and have some previous experience using &lt;a href=&#34;https://en.wikipedia.org/wiki/Hidden_file_and_hidden_directory&#34;&gt;dotfiles&lt;/a&gt; and the command line. Since I use a Mac, a lot of the instructions will be for OSX but the information will transfer easily to other operating systems.&lt;/p&gt;

&lt;p&gt;Alright, let’s get to it!&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;INSTALLATION&lt;/h2&gt;

&lt;p&gt;Let’s install &lt;a href=&#34;https://www.iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; to replace the terminal that comes with Macs.&lt;/p&gt;

&lt;p&gt;Then, let’s install &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt; (for installing vim plugins) and the &lt;a href=&#34;https://github.com/powerline/fonts&#34;&gt;Powerline Fonts&lt;/a&gt; (for making it look pretty)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/powerline/fonts.git ~/Downloads/fonts &amp;amp;&amp;amp; ~/Downloads/fonts/install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! now you can run the command &lt;code&gt;vim&lt;/code&gt; and it should open up the text editor…&lt;/p&gt;

&lt;p&gt;But it probably looks boring. So let’s make it awesome by changing the editing the .vimrc file.&lt;/p&gt;

&lt;h2 id=&#34;vimrc&#34;&gt;VIMRC&lt;/h2&gt;

&lt;p&gt;If it’s not there already, create a .vimrc file and open it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;touch ~/.vimrc &amp;amp;&amp;amp; vim ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s add some simple configurations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; Main Configuration
let mapleader=&amp;quot;\&amp;lt;Space&amp;gt;&amp;quot;
syntax on
set shell=bash
set number
set hlsearch
set guifont=Menlo\ for\ Powerline
filetype off                  &amp;quot; required
filetype plugin indent on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These will add numbers, highlights, and other basics. Let’s add Vundle (our plugin manager) so we can add external plugins.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin &#39;VundleVim/Vundle.vim&#39;
call vundle#end()            
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s add some useful plugins. To find more information about them, add github.com/ before it and look at the repo online.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; PLUGINS!!
Plugin &#39;terryma/vim-multiple-cursors&#39;
Plugin &#39;Valloric/YouCompleteMe&#39;
Plugin &#39;SirVer/ultisnips&#39;
Plugin &#39;honza/vim-snippets&#39;
Plugin &#39;scrooloose/nerdtree&#39;
Plugin &#39;ctrlpvim/ctrlp.vim&#39;
Plugin &#39;altercation/vim-colors-solarized&#39;
Plugin &#39;Lokaltog/powerline&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to save and then run the following command to install our packages&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:PluginInstall!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a list of Vundle commands that I keep in my vimrc file for quick reference&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; &amp;quot; Plugin Brief help
&amp;quot; &amp;quot; :PluginList       - lists configured plugins
&amp;quot; &amp;quot; :PluginInstall    - installs plugins; append `!` to update or just
&amp;quot; &amp;quot; :PluginUpdate
&amp;quot; &amp;quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache
&amp;quot; &amp;quot; :PluginClean      - confirms removal of unused plugins; append `!` to
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ycm-and-ultisnips-snippets&#34;&gt;YCM and UltiSnips Snippets:&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Valloric/YouCompleteMe&#34;&gt;You Complete Me&lt;/a&gt; and &lt;a href=&#34;https://github.com/SirVer/ultisnips&#34;&gt;UltiSnips&lt;/a&gt; are two of the best add ons for snippets. You might be fine with just YCM, I added UltiSnips for some specific language snippet configurations. And like all vim plugins, we need to add configurations for it to use it properly&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; Snippet configuration.
let g:UltiSnipsExpandTrigger=&amp;quot;&amp;lt;s-enter&amp;gt;&amp;quot;
let g:UltiSnipsJumpForwardtrigger=&amp;quot;&amp;lt;c-b&amp;gt;&amp;quot;
let g:UltiSnipsJumpBackwardTrigger=&amp;quot;&amp;lt;c-z&amp;gt;&amp;quot;
let g:UltiSnipsEditSplit=&amp;quot;vertical&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;aesthetic-themes&#34;&gt;Aesthetic Themes&lt;/h4&gt;

&lt;p&gt;These are some configurations for colors (&lt;a href=&#34;http://ethanschoonover.com/solarized&#34;&gt;Solarized&lt;/a&gt;) and fonts (&lt;a href=&#34;https://github.com/powerline/fonts&#34;&gt;Powerline&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; Color Theme
syntax enable
colorscheme solarized
let g:solarized_termcolors = &amp;amp;t_Co
let g:solarized_termtrans = 1
let g:solarized_termcolors=256
let g:solarized_visibility = &amp;quot;high&amp;quot;
let g:solarized_contrast = &amp;quot;high&amp;quot;
set background=dark

&amp;quot; Font Theme
set guifont=Inconsolata\ for\ Powerline:h15
let g:Powerline_symbols = &#39;fancy&#39;
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8

if has(&amp;quot;gui_running&amp;quot;)
 let s:uname = system(&amp;quot;uname&amp;quot;)
 if s:uname == &amp;quot;Darwin\n&amp;quot;
  set guifont=Inconsolata\ for\ Powerline:h15
 endif
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;leader&#34;&gt;Leader:&lt;/h4&gt;

&lt;p&gt;Previously, we set the mapleader to be the space bar. This allows for setting custom commands. Here are some examples of the shortcuts I’ve added to my vim profile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Productivity
&amp;quot; allows for a quick escape out of insert mode
inoremap jj &amp;lt;ESC&amp;gt;
&amp;quot; quick save and write commands (again, the &amp;lt;leader&amp;gt; is the spacebar)
noremap &amp;lt;leader&amp;gt;s :w&amp;lt;CR&amp;gt;
nnoremap &amp;lt;leader&amp;gt;w :wq&amp;lt;CR&amp;gt;
nnoremap &amp;lt;leader&amp;gt;fq :q!&amp;lt;CR&amp;gt;
&amp;quot; redo
nnoremap &amp;lt;leader&amp;gt;u &amp;lt;C-r&amp;gt;
&amp;quot; remove highlights
nnoremap &amp;lt;leader&amp;gt;o :noh&amp;lt;CR&amp;gt;
&amp;quot; quickly go to .vimrc
nnoremap &amp;lt;leader&amp;gt;v :e $MYVIMRC&amp;lt;CR&amp;gt;
&amp;quot; go back
nnoremap &amp;lt;C-b&amp;gt; :b#&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, add the following line to open &lt;a href=&#34;https://github.com/scrooloose/nerdtree&#34;&gt;NERDTree&lt;/a&gt; by default when you open vim.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd VimEnter * NERDTree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next time you open vim, it should look like other text editors you know and love.&lt;/p&gt;

&lt;h2 id=&#34;personal-extras&#34;&gt;PERSONAL EXTRAS&lt;/h2&gt;

&lt;p&gt;There are so, so many more plugins and shortcuts that you can add to make vim better suited for you. Specially for the languages you use. If you ever find yourself typing the same command over and over and it seems a bit of a hassle, you can shorten it and make it easier.&lt;/p&gt;

&lt;p&gt;Here are a few that I’ve added over time to &lt;a href=&#34;https://github.com/berto/dotfiles/blob/master/.vimrc&#34;&gt;my vimrc file&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;No arrow keys
nnoremap   &amp;lt;up&amp;gt;   &amp;lt;nop&amp;gt;
nnoremap  &amp;lt;down&amp;gt;  &amp;lt;nop&amp;gt;
nnoremap  &amp;lt;left&amp;gt;  &amp;lt;nop&amp;gt;
nnoremap  &amp;lt;right&amp;gt; &amp;lt;nop&amp;gt;
inoremap   &amp;lt;up&amp;gt;   &amp;lt;nop&amp;gt;
inoremap  &amp;lt;down&amp;gt;  &amp;lt;nop&amp;gt;
inoremap  &amp;lt;left&amp;gt;  &amp;lt;nop&amp;gt;
inoremap  &amp;lt;right&amp;gt; &amp;lt;nop&amp;gt;

&amp;quot;Spell check
nnoremap &amp;lt;leader&amp;gt;sc :set spell spelllang=en_us&amp;lt;CR&amp;gt;
nnoremap &amp;lt;leader&amp;gt;so :set nospell&amp;lt;CR&amp;gt;

&amp;quot;Clipboard
nnoremap &amp;lt;leader&amp;gt;y :&amp;lt;C-u&amp;gt;exec &#39;normal &#39; . v:count1 . &#39;&amp;quot;+yy&#39;&amp;lt;CR&amp;gt;
vnoremap &amp;lt;leader&amp;gt;y &amp;quot;+y
nnoremap &amp;lt;leader&amp;gt;p :&amp;lt;C-u&amp;gt;exec &#39;normal &#39; . v:count1 . &#39;&amp;quot;+p&#39;&amp;lt;CR&amp;gt;
vnoremap &amp;lt;leader&amp;gt;p &amp;quot;+p
nnoremap &amp;lt;leader&amp;gt;d :&amp;lt;C-u&amp;gt;exec &#39;normal &#39; . v:count1 . &#39;&amp;quot;+dd&#39;&amp;lt;CR&amp;gt;
vnoremap &amp;lt;leader&amp;gt;d &amp;quot;+d 

&amp;quot;Moving lines
nnoremap &amp;lt;C-j&amp;gt; :m .+1&amp;lt;CR&amp;gt;
nnoremap &amp;lt;C-k&amp;gt; :m .-2&amp;lt;CR&amp;gt;

&amp;quot;Bottom bar settings
set noruler
set laststatus=2
set statusline=%&amp;lt;\ %f\ %m%y%=%-35.(Line:\ %l\ of\ %L,\ Col:\ %c%V\ (%P)%)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;NEXT STEPS&lt;/h2&gt;

&lt;p&gt;Use it! vimtutor is great for getting started with the language (just type &lt;code&gt;vimtutor&lt;/code&gt; in your terminal to begin). I also like &lt;a href=&#34;http://vim-adventures.com/&#34;&gt;Vim Adventures&lt;/a&gt; for a more entertaining way of learning vim. Also, look into &lt;a href=&#34;http://vimawesome.com/&#34;&gt;Vim Awesome&lt;/a&gt; for the best plugins to get.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/gopher4.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Development In Go: Beginners Step by Step Intro</title>
      <link>https://berto.github.io/blog/web-development-in-go-beginners-step-by-step-intro/</link>
      <pubDate>Wed, 20 Jul 2016 14:01:29 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/web-development-in-go-beginners-step-by-step-intro/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/web-development-in-go-beginners-step-by-step-intro/#what-to-expect-from-this-post&#34;&gt;What to expect from this post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/web-development-in-go-beginners-step-by-step-intro/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/web-development-in-go-beginners-step-by-step-intro/#hello-go&#34;&gt;Hello Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/web-development-in-go-beginners-step-by-step-intro/#web-server&#34;&gt;Web Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/web-development-in-go-beginners-step-by-step-intro/#deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/web-development-in-go-beginners-step-by-step-intro/#next-steps&#34;&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-to-expect-from-this-post&#34;&gt;WHAT TO EXPECT FROM THIS POST&lt;/h2&gt;

&lt;p&gt;This is a beginner’s introduction to using Go for Web Development. By the end of this post, we will have built and deployed a simple web site.&lt;/p&gt;

&lt;p&gt;I’m striving for a low barrier to entry approach. This means minimizing the complexity by sparing some details and using libraries/frameworks that do most of the magic for us.&lt;/p&gt;

&lt;p&gt;If you want to dive deeper, I suggest reading some of the books already available in this &lt;a href=&#34;https://github.com/dariubs/GoBooks&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, please checkout &lt;a href=&#34;https://github.com/ardanlabs/gotraining&#34;&gt;Ardan Labs&lt;/a&gt; for awesome Go training classes. And speaking of awesome, checkout &lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;Awesome Go&lt;/a&gt; for a curated list of resources to use for your next project.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;GETTING STARTED&lt;/h2&gt;

&lt;p&gt;If you have not installed Go, the Golang Book does a terrific job walking you through it. For the lazy:&lt;/p&gt;

&lt;p&gt;Open up your terminal (This is probably the best time to mention I have a Mac and will be using a OSX).&lt;/p&gt;

&lt;p&gt;Install &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. This makes downloading software a breeze.&lt;/p&gt;

&lt;p&gt;Go into &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt; and set up an account. It’s free with the basic account but credit card and phone verification is still required. Takes a few minutes. Then, dive into EC2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install Go&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew cask install atom&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create your Go workspace. Everything you do should be inside this directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir -p ~/go/src&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lastly, set your &lt;a href=&#34;https://en.wikipedia.org/wiki/Environment_variable&#34;&gt;environment variables&lt;/a&gt; so the computer knows where to run Go&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo export GOPATH=&#39;$HOME&#39;/go &amp;gt;&amp;gt; ~/.profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo export PATH=&#39;$PATH&#39;:&#39;$GOPATH&#39;/bin &amp;gt;&amp;gt; ~/.profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;source ~/.profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That’s it! for more information on Go’s environment, check out the &lt;a href=&#34;https://golang.org/doc/code.html&#34;&gt;GoDocs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;hello-go&#34;&gt;HELLO GO&lt;/h2&gt;

&lt;p&gt;Now that your environment is set up, let’s test it:&lt;/p&gt;

&lt;p&gt;Make a file inside your Go workspace&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd ~/go/src/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch main.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;atom main.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This commands will traverse to your workspace, create a file, and open it with Atom. Then paste:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    fmt.Println(&amp;quot;Hello Go!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run the program with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go run main.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go run&lt;/code&gt; builds the binary and executes it.&lt;/p&gt;

&lt;p&gt;If it all went well, you should see “Hello Go!” on your terminal… if not, get a new computer and start over.&lt;/p&gt;

&lt;h2 id=&#34;web-server&#34;&gt;WEB SERVER&lt;/h2&gt;

&lt;p&gt;The terminal is great, but let’s get a hello in our browser. First, lets make a new directory for our project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir -p $GOPATH/src/web-server&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let’s install &lt;a href=&#34;https://gin-gonic.github.io/gin/&#34;&gt;Gin&lt;/a&gt; to run our server. In Go, install packages by using &lt;code&gt;go get&lt;/code&gt;, this installs packages inside your go &lt;code&gt;src&lt;/code&gt; directory with the paths being nested directories. So when you run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get github.com/gin-gonic/gin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your Go workspace should look something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go/  
  |- pkg/
  |- bin/
  |- src/
    |- github/
      |- gin-gonic/
        |- gin/
    |- web-server/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside our project, create a &lt;code&gt;main.go&lt;/code&gt; file. There, let’s write our server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

// here we define our imports
import (
  // import in standard libraries
	&amp;quot;net/http&amp;quot;
	&amp;quot;os&amp;quot;

  // import the web framework
	&amp;quot;github.com/gin-gonic/gin&amp;quot;
)

// all go projects require a main function
// this is the function that runs the program
func main() {
  // initialize a gin server
	r := gin.Default()

  // load html files to be rendered
	r.LoadHTMLGlob(&amp;quot;*.html&amp;quot;)
  // parse through static files to be served
  // static files include our js and css
	r.Static(&amp;quot;/public&amp;quot;, &amp;quot;public&amp;quot;)

  // define the port our server will be running on
	port := os.Getenv(&amp;quot;PORT&amp;quot;)
	if port == &amp;quot;&amp;quot; {
		port = &amp;quot;3000&amp;quot;
	}

  // define the route path and response
	r.GET(&amp;quot;/&amp;quot;, func(c *gin.Context) {
		c.HTML(http.StatusOK, &amp;quot;index.html&amp;quot;, gin.H{
			&amp;quot;HelloMessage&amp;quot;: &amp;quot;Go is Awesome!&amp;quot;,
		})
	})

  // start the server
	r.Run(&amp;quot;:&amp;quot; + port)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to create the main HTML file to be rendered&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch index.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add some filler text&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Go is Awesome!&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/public/style.css&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h2&amp;gt;{{.HelloMessage}}&amp;lt;/h2&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;{{. }}&lt;/code&gt;. This is syntax Go’s template engine. Basically, it will dynamically render information from our server into the HTML.&lt;/p&gt;

&lt;p&gt;Let’s make a &lt;code&gt;style.css&lt;/code&gt; file to make sure our server is serving our static &lt;code&gt;public&lt;/code&gt; directory&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir public &amp;amp;&amp;amp; touch public/style.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And add some style&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body {
  color: white;
  background: rebeccapurple;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, let’s run it like we did before&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go run main.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We should get some messages from Gin in our terminal, but most importantly, in your browser, if you navigate to &lt;code&gt;localhost:3000&lt;/code&gt;, you should see a purple page with some white text.&lt;/p&gt;

&lt;h2 id=&#34;deployment&#34;&gt;DEPLOYMENT&lt;/h2&gt;

&lt;p&gt;Now that we have a web server running, we shall deploy it so everyone can see it! For this we will use &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;. Here is a great resource to get started with &lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-go&#34;&gt;Heroku and Go&lt;/a&gt;, and here is my TLDR:&lt;/p&gt;

&lt;p&gt;Before we deploy, we should move all of our 3rd party packages into a &lt;code&gt;/vendor&lt;/code&gt; directory. In other words, vendor our packages. To do this, we will use &lt;a href=&#34;https://github.com/kardianos/govendor&#34;&gt;govendor&lt;/a&gt;. Like before, let’s use &lt;code&gt;go get&lt;/code&gt; to install it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get github.com/kardianos/govendor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, let’s use it to create a our vendor directory with our dependencies&lt;/p&gt;

&lt;p&gt;&lt;code&gt;govendor init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;govendor add +external&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next step is to create a &lt;code&gt;Procfile&lt;/code&gt; so Heroku knows the process type of our project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo &amp;quot;web: web-server&amp;quot; &amp;gt;&amp;gt; Procfile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we have everything we need, let’s save this version using Git.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add -A&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m &amp;quot;initial commit&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://signup.heroku.com/login&#34;&gt;Sign up&lt;/a&gt; to Heroku and download the &lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-go#set-up&#34;&gt;CLI Toolbelt&lt;/a&gt;. When ready, simply create an app (with a unique name) and send the project to Heroku&lt;/p&gt;

&lt;p&gt;&lt;code&gt;heroku create [unique-name]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push heroku master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;heroku open&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All done! We have successfully built a web server and deployed it to the internet. Pad yourself on the back.&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;NEXT STEPS&lt;/h2&gt;

&lt;p&gt;From here, build up your server. Add some routes, add some views, build your own blog. &lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by Example&lt;/a&gt; is one of my favorite tools to learn the language.&lt;/p&gt;

&lt;p&gt;And speaking of examples, I highly encourage looking at some of my &lt;a href=&#34;https://github.com/search?q=user%3Aberto+language%3Ago&#34;&gt;previous work&lt;/a&gt; for examples on &lt;a href=&#34;https://github.com/berto/twitch-streams/blob/master/main.go&#34;&gt;multiple routes&lt;/a&gt;, &lt;a href=&#34;https://github.com/berto/sugoku/blob/master/main.go#L70&#34;&gt;serving JSON&lt;/a&gt;, and hooking up a &lt;a href=&#34;https://github.com/berto/beer-tinder/blob/master/main.go#L37&#34;&gt;database&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/gopher2.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS EC2 VPS Setup</title>
      <link>https://berto.github.io/blog/aws-ec2-vps-setup/</link>
      <pubDate>Sat, 18 Jun 2016 20:08:23 -0700</pubDate>
      
      <guid>https://berto.github.io/blog/aws-ec2-vps-setup/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/aws-ec2-vps-setup/#set-up-server&#34;&gt;Set Up Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/aws-ec2-vps-setup/#buy-domain&#34;&gt;Buy Domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/aws-ec2-vps-setup/#power-up-ubuntu-server&#34;&gt;Power Up Ubuntu Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://berto.github.io/blog/aws-ec2-vps-setup/#next-steps&#34;&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part of being a developer is having your own virtual private server (VPS). Personally, I’m a big fan of &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt;. Amazon however offers a year of free service, so to keep our beer budget intact, in this tutorial, I’ll walk you step by step on setting up an EC2 Instance on AWS.&lt;/p&gt;

&lt;h2 id=&#34;set-up-server&#34;&gt;SET UP SERVER&lt;/h2&gt;

&lt;h4 id=&#34;create-aws-account&#34;&gt;Create AWS Account&lt;/h4&gt;

&lt;p&gt;Go into &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt; and set up an account. It’s free with the basic account but credit card and phone verification is still required. Takes a few minutes. Then, dive into EC2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/aws/first.png&#34; alt=&#34;first&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;create-an-instance&#34;&gt;Create an Instance&lt;/h4&gt;

&lt;p&gt;Go to “My Account” &amp;gt; “AWS Management Console”. Then “Launch Instance”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/aws/second.png&#34; alt=&#34;second&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Choose 64-bit Ubuntu Server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/aws/third.png&#34; alt=&#34;third&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Launch Instance with the free tier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/aws/fourth.png&#34; alt=&#34;fourth&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Open up HTTP connection on port 80 for your server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/aws/fifth.png&#34; alt=&#34;fifth&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A prompt to add key pair will show up. Create and download a new one. (don’t lose it)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/aws/sixth.png&#34; alt=&#34;sixth&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Launch again!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/aws/seventh.png&#34; alt=&#34;seventh&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;connecting-through-ssh&#34;&gt;Connecting through SSH&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at our instances now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/aws/eigth.png&#34; alt=&#34;eigth&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Find the public IP for the instance that we created. We’ll use it in a bit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/aws/ninth.png&#34; alt=&#34;ninth&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Copy the SSH key (that was downloaded and not lost) and paste it into the ~/.ssh file. Then change ownership to secure it: &lt;code&gt;chmod 600 /.ssh [ssh_key].pem&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, connect to the instance: &lt;code&gt;ssh -i ~/.ssh/[ssh_key].pem ubuntu@[ip address]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/aws/tenth.png&#34; alt=&#34;tenth&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;buy-domain&#34;&gt;BUY DOMAIN&lt;/h2&gt;

&lt;p&gt;Go to a domain site and purchase a name. They range around $10. Here are some places to start:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.namecheap.com/&#34;&gt;https://www.namecheap.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.name.com/&#34;&gt;https://www.name.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://domains.google.com/&#34;&gt;https://domains.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, navigate to editing the DNS records for that domain. Add a basic ~type A~ host with the IP of the AWS server previously set up and the name of the domain.&lt;/p&gt;

&lt;p&gt;Extra: add a ~type CNAME~ host with the same IP address and the name of www to catch and redirect anyone trying to go to www.yourdomain&lt;/p&gt;

&lt;h2 id=&#34;power-up-ubuntu-server&#34;&gt;POWER UP UBUNTU SERVER&lt;/h2&gt;

&lt;h4 id=&#34;replace-ubuntu-user-not-necessary&#34;&gt;Replace Ubuntu User (not necessary)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Connect back to the AWS Server: &lt;code&gt;ssh -i ~/.ssh/[ssh_key].pem ubuntu@[ip address]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a new user through the following commands:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo adduser [your name]&lt;/code&gt;
&lt;code&gt;sudo gpasswd -a [your name]&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove root user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;vi /etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;find PermitRootLogin yes, and change to no&lt;/li&gt;
&lt;li&gt;service ssh restart&lt;/li&gt;
&lt;li&gt;su [your name]&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;install-tools&#34;&gt;Install Tools&lt;/h4&gt;

&lt;p&gt;Use &lt;code&gt;sudo apt-get install&lt;/code&gt; to install most technologies into the server. To get started, type &lt;code&gt;sudo apt-get update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Nginx:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apt-get install nginx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Out of the box, nginx sets up a hello world on port 80. You should be able to navigate to your server from your browser (through the ip address or newly purchased domain) and see a welcome to nginx.&lt;/p&gt;

&lt;h4 id=&#34;adding-a-project&#34;&gt;Adding a Project&lt;/h4&gt;

&lt;p&gt;First, lets add the project to our server. For this demo, choose a static site. The easiest way is to use &lt;code&gt;git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;then clone your project inside &lt;code&gt;/etc/nginx/sites-available/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The main configuration of ngninx lives in &lt;code&gt;sudo vi /etc/nginx/sites-enabled/default&lt;/code&gt;. There, you will see the server configurations for port, paths and project directory.&lt;/p&gt;

&lt;p&gt;To add your own project, change the &lt;code&gt;root&lt;/code&gt; default path to the path of our added project:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/nginx/sites-available/{your-project-name}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Always remember to restart the server after any change.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo service nginx restart&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;NEXT STEPS&lt;/h2&gt;

&lt;p&gt;From here, time to beef up your server. Look into the &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-an-ubuntu-14-04-server&#34;&gt;Digital Ocean&lt;/a&gt; tutorials for setting up any language environment and &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-14-04&#34;&gt;Reverse Proxy Servers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://berto.github.io/img/gopher6.png&#34; alt=&#34;gopher&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>